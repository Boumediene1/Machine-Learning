import numpy as np

class gauss_mv:
    '''
    n_dims: dimensions de donnees
    cov_type: type de covariance pour calculer la
    variance (sigma_sq)
    mu: la moyenne
    sigma_sq: la variance
    '''
    def __init__(self,n_dims,cov_type="isotropique"):
        self.n_dims = n_dims
        self.mu = np.zeros((1,n_dims))
        self.cov_type = cov_type
        
        if cov_type=="isotropique":
            self.sigma_sq = 1.0
        if cov_type=="diagonale":
            self.sigma_sq = np.ones(n_dims)
    
    def train(self, train_data):
        self.mu = np.mean(train_data,axis=0)
        # Calculer la variance de chaque dimension de donnees
        sigma_sq = np.var(train_data, axis=0)
        if self.cov_type == "isotropique":
            # Calculer la moyenne des variances des dimensions
            # pour le type isotropique qui a qu'un sigma_sq
            sigma_sq_iso = np.mean(sigma_sq)
            self.sigma_sq = sigma_sq_iso
            
        if self.cov_type == "diagonale":
            self.sigma_sq = sigma_sq
            
    '''
    Calculer le log de probabilite Guassienne
	'''
    def compute_predictions(self, test_data):
        if self.n_dims == 1:
            if self.cov_type == "isotropique":
                # Calculer la constante de l'equation de Gaussienne
                c = -self.n_dims * np.log(2*np.pi)/2.0 - self.n_dims*np.log(self.sigma_sq)/2.0
            
                log_prob = c - (test_data-self.mu)**2.0 / (2.0 * self.sigma_sq)

        elif self.n_dims == 2:
            n_test = test_data.shape[0]
            log_prob = np.ones((n_test, n_test))
            if self.cov_type == "isotropique":
                for i in range(n_test):
                    for j in range(n_test):
                        test_point = [test_data[i,0], test_data[j,1]]
                        c = -self.n_dims * np.log(2*np.pi)/2.0 - self.n_dims*np.log(self.sigma_sq)/2.0
                        log_prob[i,j] = c - np.sum((test_point -  self.mu)**2.0/ (2.0 * self.sigma_sq))
            
            elif self.cov_type == "diagonale":
                for i in range(n_test):
                    for j in range(n_test):
                        test_point = [test_data[j,0], test_data[i,1]]
                        c = -self.n_dims * np.log(2*np.pi)/2.0 - self.n_dims*np.log(np.prod(self.sigma_sq))/2.0
                        log_prob[i,j] = c - np.sum((test_point -  self.mu)**2.0/ (2.0 * self.sigma_sq))

        return log_prob
